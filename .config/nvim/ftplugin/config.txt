
local M = {}

function M.setup()
	local on_attach = require("vm.lsp").on_attach
	local custom_cap = require("vm.lsp").capabilities
	local root_markers = { "gradlew" }
	local root_dir = require("jdtls.setup").find_root(root_markers)
	local home = os.getenv("HOME")
	local telescope_mapper = require("vm.telescope.mappings")

	local workspace_folder = home .. "/.workspace-" .. vim.fn.fnamemodify(root_dir, ":p:h:t")
	local config = {
		flags = {
			allow_incremental_sync = true,
		},
		capabilities = custom_cap,
		on_attach = on_attach,
	}

    local formatpath = function()
        if root_dir == nil then
            return ''
        else
            return root_dir .. '/code_style.xml'
        end
    end

	config.settings = {
		java = {
			signatureHelp = { enabled = true },
			contentProvider = { preferred = "fernflower" },
			completion = {
				favoriteStaticMembers = {
					"org.hamcrest.MatcherAssert.assertThat",
					"org.hamcrest.Matchers.*",
					"org.hamcrest.CoreMatchers.*",
					"org.junit.jupiter.api.Assertions.*",
					"java.util.Objects.requireNonNull",
					"java.util.Objects.requireNonNullElse",
					"org.mockito.Mockito.*",
				},
			},
			sources = {
				organizeImports = {
					starThreshold = 9999,
					staticStarThreshold = 9999,
				},
			},
			codeGeneration = {
				toString = {
					template = "${object.className}{${member.name()}=${member.value}, ${otherMembers}}",
				},
			},
			configuration = {
				runtimes = {
					{
						name = "JavaSE-11",
						path = home .. "/.sdkman/candidates/java/11.0.12-open/",
					},
					{
						name = "JavaSE-16",
						path = home .. "/.sdkman/candidates/java/16.0.2-open/",
					},
				},
			},
            format = {
                settings = {
                    url = formatpath(),
                    profile = 'Work'
                }
            }
		},
	}
    print(config)

	config.cmd = { "java-lsp.sh", workspace_folder }
	config.filetypes = { "java" }
	config.on_init = function(client, _)
		vim.notify("workspace/didChangeConfiguration", { settings = config.settings })
	end

	local extendedClientCapabilities = require("jdtls").extendedClientCapabilities
	extendedClientCapabilities.resolveAdditionalTextEditsSupport = true
	config.init_options = {
		-- bundles = bundles;
		extendedClientCapabilities = extendedClientCapabilities,
	}

	vim.cmd([[
    command! -buffer JdtCompile lua require('jdtls').compile()
    command! -buffer JdtUpdateConfig lua require('jdtls').update_project_config()
    command! -buffer JdtJol lua require('jdtls').jol()
    command! -buffer JdtBytecode lua require('jdtls').javap()
    command! -buffer JdtJshell lua require('jdtls').jshell()
    ]])
	-- Server
	require("jdtls").start_or_attach(config)
end

return M
